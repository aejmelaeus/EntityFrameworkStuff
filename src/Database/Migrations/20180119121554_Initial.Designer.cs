// <auto-generated />
using Common;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Database.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20180119121554_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Database.Entitites.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByUserDisplayName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<Guid>("CreatedByUserId");

                    b.Property<DateTime>("CreatedUtc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<Guid>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Database.Entitites.GroupLicense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AssignedGroupId");

                    b.Property<int>("Days");

                    b.Property<DateTime?>("EndDateUtc");

                    b.Property<int>("NumberOfUsers");

                    b.Property<Guid>("OwnerId");

                    b.Property<Guid>("ProductId");

                    b.Property<DateTime?>("StartDateUtc");

                    b.HasKey("Id");

                    b.HasIndex("AssignedGroupId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ProductId");

                    b.ToTable("GroupLicenses");
                });

            modelBuilder.Entity("Database.Entitites.GroupMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("GroupId");

                    b.Property<int>("TenantUserId");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("TenantUserId");

                    b.ToTable("GroupMembers");
                });

            modelBuilder.Entity("Database.Entitites.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Database.Entitites.SingleLicense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AssignedUserId");

                    b.Property<int>("Days");

                    b.Property<DateTime?>("EndDateUtc");

                    b.Property<Guid>("OwnerId");

                    b.Property<Guid>("ProductId");

                    b.Property<DateTime?>("StartDateUtc");

                    b.HasKey("Id");

                    b.HasIndex("AssignedUserId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ProductId");

                    b.ToTable("SingleLicenses");
                });

            modelBuilder.Entity("Database.Entitites.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("Database.Entitites.TenantUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Role");

                    b.Property<Guid>("TenantId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("TenantUsers");
                });

            modelBuilder.Entity("Database.Entitites.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Database.Entitites.Group", b =>
                {
                    b.HasOne("Database.Entitites.Tenant", "Tenant")
                        .WithMany("Groups")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Entitites.GroupLicense", b =>
                {
                    b.HasOne("Database.Entitites.Group", "AssignedGroup")
                        .WithMany("Licenses")
                        .HasForeignKey("AssignedGroupId");

                    b.HasOne("Database.Entitites.Tenant", "Owner")
                        .WithMany("GroupLicenses")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Entitites.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Entitites.GroupMember", b =>
                {
                    b.HasOne("Database.Entitites.Group", "Group")
                        .WithMany("Members")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Entitites.TenantUser", "TenantUser")
                        .WithMany()
                        .HasForeignKey("TenantUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Entitites.SingleLicense", b =>
                {
                    b.HasOne("Database.Entitites.TenantUser", "AssignedUser")
                        .WithMany()
                        .HasForeignKey("AssignedUserId");

                    b.HasOne("Database.Entitites.Tenant", "Owner")
                        .WithMany("SingleLicenses")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Entitites.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Database.Entitites.TenantUser", b =>
                {
                    b.HasOne("Database.Entitites.Tenant", "Tenant")
                        .WithMany("TenantUsers")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Database.Entitites.User", "User")
                        .WithMany("TenantUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
